Course Content:
Git Basics:
    Git Setup
    Terminal basics
    Create your first Repository
    Make first commit
    Check history

Undoing Things:
    What is HEAD?
    Git checkout
    Git Revert and git reset
    Ignoring files by git

Basics if Github:
    What is github?
    Create First Repository on Github
    Pushing local repository on Github
    Make first commit on Github

Working with branches:
    What is branching?
    Branching in github

Merge Branches:
    Git merge(fast forward)
    Git merge(3-way merge)
    Merge Conflict
    Git Rebase

Merging in github:
    Pull request and merge on github
    Merge conflicts on github*****

Forking anf Contributing
    Fork and Clone
    Contribute to the original Project
    Collaborate in Github




Git:
    Allows you to record your changes(versions) of your projects and 
    Allows you to go back and forth in different version

GitHub/Gitlab:
    Online services build on git
    You can collaborate with other developers

What is GIT?
    It is a distributed version control system.
    It creates a snapshot of your version and stores it in the same directory.

List of commands:
mkdir
touch
nano
pwd
cat

git init
git status
git add
git commit -m ""
git rm --cached <file>
git log

Task:
1. Create a folder
2. Create a test file
3. Check the status of the folder
4. Initialize a Repository
5. Check the status and understand the changes
6. Create 2 more files
7. See the status
8. Add File1 to the staging area
9. Bring it back to untracked area
10. Add File2 to Staging area
11. Commit your changes and find the commit ID(if you get error let me know at this stage)
12. If no error then go ahead and make changes in File2 again
13. See the difference and understand
14. Now add any untracked file and see the difference
15. Now commit all the files in git
16. Check the history and understand all the information shows by Git
Bonus Task!!!!!!
17. How can you restore a Tracked file from staging area??

-----------------------------------------------------------------------
Git Config:
The git config command is a convenience function that is used to set Git configuration values on a global or local project level. These configuration levels correspond to .gitconfig text files. Executing git config will modify a configuration text file. We'll be covering common configuration settings like email, username, and editor. We'll discuss Git aliases, which allow you to create shortcuts for frequently used Git operations. Becoming familiar with git config and the various Git configuration settings will help you create a powerful, customized Git workflow.

List of commands:
history | grep git
git config --global user.name ""
git config --global user.email ""
git config --global core.editor "code --wait"

git config --global --unset core.editor

Undoing things:

git log --oneline
git show <commitId>
git show HEAD
git show HEAD~(integer number that tell how many commits you want to go back)
git checkout <file name>
git restore <file name>
git restore --staged <file name>
git stash
git stash pop
git stash list
git stash show
git checkout<commitId>
git checkout master

Git Revert: 
    It is used to undo changes to your Project commit history. 
    The revert command takes the specifed commit, inverse the changes from that commit
    and creates a new revert commit.

git revert <commitID>


Git Reset
Dangerous and unsafe command.
It will permanently delete your work.

git reset --mixed <commitID> (default)
git reset --soft <commitID>
git reset --hard <commitId>








